# -*- coding: utf-8 -*-
"""GradCam1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VkOEO65vwRfb6CT0SwMfHuKHewKSbbdj

Copied from https://www.codetrade.io/blog/grad-cam-a-complete-guide-with-example/ as a learning example
"""

import PIL
import numpy as np
import requests
import matplotlib.pyplot as plt
from matplotlib import cm
import tensorflow as tf

def get_processed_img(url):
    # Open the image using the URL
    img_from_url = PIL.Image.open(requests.get(url, stream=True).raw)

    # Adjust the image dimensions to a standard size.
    new_image = img_from_url.resize((224, 224))

    # Transform the image into a NumPy array.
    processed_image = np.asarray(new_image)

    # Normalise pixel values if necessary
    if processed_image.max() > 1:
        processed_image = processed_image / 255

    # Add a batch dimension
    image = np.expand_dims(processed_image, axis=0)

    return image

def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):
    # Create a sub-model that outputs the feature maps and final prediction
    grad_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]
    )

    # Use GradientTape to record gradients
    with tf.GradientTape() as tape:
        last_conv_layer_output, preds = grad_model(img_array)

        # If pred_index is not specified, use the predicted class index
        if pred_index is None:
            pred_index = tf.argmax(preds[0])
        class_channel = preds[:, pred_index]

    # Calculate gradients
    grads = tape.gradient(class_channel, last_conv_layer_output)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))

    # Compute the heatmap
    last_conv_layer_output = last_conv_layer_output[0]
    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)

    # Normalise the heatmap
    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)

    return heatmap.numpy()

def display_gradcam(img, heatmap, alpha=0.4):
    # Rescale heatmap to a range of 0-255
    heatmap = np.uint8(255 * heatmap)

    # Use the "jet" colormap to colourize the heatmap
    jet = cm.get_cmap("jet")
    jet_colors = jet(np.arange(256))[:, :3]
    jet_heatmap = jet_colors[heatmap]

    # Transform the heatmap into an image.
    jet_heatmap = tf.keras.utils.array_to_img(jet_heatmap)

    # Resize the heatmap to match the image dimensions
    jet_heatmap = jet_heatmap.resize((img.shape[2], img.shape[1]))
    jet_heatmap = tf.keras.utils.img_to_array(jet_heatmap)

    # Superimpose the heatmap on the original image
    superimposed_img = jet_heatmap * alpha + img
    plt.imshow(superimposed_img[0])

densenet_model = tf.keras.applications.DenseNet201(include_top=False, input_shape=(224,224,3))

for layer in densenet_model.layers:
  layer.trainable = False

Flattened_layer = tf.keras.layers.Flatten()(densenet_model.output)
output_layer = tf.keras.layers.Dense(10, activation='softmax')(Flattened_layer)

final_model = tf.keras.models.Model(inputs=densenet_model.input, outputs=output_layer)

img_arr = get_processed_img('https://t3.ftcdn.net/jpg/01/05/57/38/360_F_105573812_cvD4P5jo6tMPhZULX324qUYFbNpXlisD.jpg')

heatmap = make_gradcam_heatmap(img_arr, final_model, 'conv3_block8_2_conv')

plt.axis('off')
plt.matshow(heatmap)
plt.show()

img1 = get_processed_img('https://t3.ftcdn.net/jpg/01/05/57/38/360_F_105573812_cvD4P5jo6tMPhZULX324qUYFbNpXlisD.jpg')
img2 = get_processed_img('https://en.wikipedia.org/wiki/Pseudanthium#/media/File:Flower_July_2011-2_1_cropped.jpg')
display_gradcam(img2, heatmap)
